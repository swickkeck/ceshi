<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" 
	xmlns:context="http://www.springframework.org/schema/context"
	 xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
          http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
          http://www.springframework.org/schema/aop
          http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
     	  http://www.springframework.org/schema/tx
     	  http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
     	  http://www.springframework.org/schema/context
          http://www.springframework.org/schema/context/spring-context-4.1.xsd
          http://www.springframework.org/schema/mvc
          http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd">
	<!-- 注解 -->
	<mvc:annotation-driven/>
	<!-- 0 -->
   	<context:component-scan base-package="com.user.service"/>
	<!-- 定义那些类使用事务 -->
	<aop:config>
		<!-- 2 -->
		<aop:advisor pointcut="execution( * com.user.service..*.*(..))"
			advice-ref="txAdvice" />
	</aop:config>
	<!-- 定义advice,配置传播特性、事务隔离级别、只读事务、回滚策略 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- get*, load*, list*, find* 不启用回滚，只读事务保持多条sql数据一致 -->
			<tx:method name="get*" read-only="true" />
			<tx:method name="load*" read-only="true" />
			<tx:method name="list*" read-only="true" />
			<tx:method name="find*" read-only="true" />
			<tx:method name="insert*" propagation="REQUIRED"
				rollback-for="java.lang.Exception" />
			<tx:method name="update*" propagation="REQUIRED"
				rollback-for="java.lang.Exception" />
			<tx:method name="delete*" propagation="REQUIRED"
				rollback-for="java.lang.Exception" />
			<tx:method name="save*" propagation="REQUIRED"
				rollback-for="java.lang.Exception" />
			<tx:method name="add*" propagation="REQUIRED" rollback-for="java.lang.Exception" />
			<tx:method name="*" propagation="REQUIRED" read-only="true" />
		</tx:attributes>
	</tx:advice>
	<!-- 配置事务结束 -->
	<!-- -->
	<context:property-placeholder location="classpath:jdbc.properties"/>

	<!-- 配置事务管理器 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
	    <property name="driverClassName" value="${driverClassName}"/>
	    <property name="url" value="${url}"/>
	    <property name="username" value="${name}"/>
	    <property name="password" value="${password}"/>
	    <!--   连接池启动时的初始值 -->
	    <property name="initialSize" value="${initialSize}"/>
	     <!-- 连接池的最大值  -->
	    <property name="maxActive" value="${maxActive}"/>
	     <!-- 最大空闲值.当经过一个高峰时间后，连接池可以慢慢将已经用不到的连接慢慢释放一部分，一直减少到maxIdle为止 -->
	    <property name="maxIdle" value="${maxIdle}"/>
	    <!--  最小空闲值.当空闲的连接数少于阀值时，连接池就会预申请去一些连接，以免洪峰来时来不及申请 -->
	    <property name="minIdle" value="${minIdle}"/>
	    <!-- 是否启用超时自动移除空闲连接 -->
	    <property name ="removeAbandoned" value="false"></property>
	     <!-- 超时时间(以秒数为单位) -->
	    <property name="removeAbandonedTimeout" value="${removeAbandonedTimeout}"/>
	   	<!-- 超时等待时间以毫秒为单位 6000毫秒/1000等于60秒 -->
	    <property name="maxWait" value="${maxWait}"/>
  	</bean>	
	<!-- 4/5/3 -->
  	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<!-- 配置实体别名 -->
		<property name="typeAliasesPackage">
			<value>com.user.entity</value>
		</property>
		<!-- 配置映射文件加载 -->
		<property name="mapperLocations">
			<value>classpath*:com/user/entity/*.xml</value>
		</property>
	</bean>
	
	<!-- 配置bean   自动扫描所有mapper   自动给Mapper接口产生代理类对象    并且给代理对象注入SqlSessionFactory-->
	<bean  class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage"> 
			<value>com.user.dao</value>
		</property>
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
	</bean>
	
</beans>